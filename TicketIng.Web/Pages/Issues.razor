@page "/issues"
@inject IssueService Service

<h1 class="mb-4">Issues</h1>

<div class="card mb-4">
  <div class="card-header">Add / Edit</div>
  <div class="card-body">
    <EditForm Model="@current" OnValidSubmit="SaveAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
<div class="row g-3">
  <div class="col-md-6">
    <label class="form-label">Title</label>
    <InputText class="form-control" @bind-Value="current.Title" />
  </div>
  <div class="col-md-6">
    <label class="form-label">Description</label>
    <InputText class="form-control" @bind-Value="current.Description" />
  </div>
  <div class="col-md-3">
    <label class="form-label">Created By User Id</label>
    <InputNumber class="form-control" @bind-Value="current.CreatedByUserId" />
  </div>
  <div class="col-md-3">
    <label class="form-label">Assigned To User Id</label>
    <InputNumber class="form-control" @bind-Value="current.AssignedToUserId" />
  </div>
  <div class="col-md-2">
    <label class="form-label">Client Id</label>
    <InputNumber class="form-control" @bind-Value="current.ClientId" />
  </div>
  <div class="col-md-2">
    <label class="form-label">Category Id</label>
    <InputNumber class="form-control" @bind-Value="current.CategoryId" />
  </div>
  <div class="col-md-2">
    <label class="form-label">Status Id</label>
    <InputNumber class="form-control" @bind-Value="current.StatusId" />
  </div>
  <div class="col-md-2">
    <label class="form-label">Release Id</label>
    <InputNumber class="form-control" @bind-Value="current.ReleaseId" />
  </div>
</div>

        <div class="mt-3 d-flex gap-2">
            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="ClearForm">Clear</button>
        </div>
    </EditForm>
  </div>
</div>

<div class="card">
  <div class="card-header d-flex justify-content-between align-items-center">
    <span>List</span>
    <button class="btn btn-sm btn-outline-secondary" @onclick="LoadAsync">Refresh</button>
  </div>
  <div class="card-body table-responsive">
    <table class="table table-striped table-hover align-middle">
      <thead>
        <tr>
          <th>Id</th><th>Title</th><th>CreatedBy</th><th>AssignedTo</th><th>ClientId</th><th>CategoryId</th><th>StatusId</th><th>ReleaseId</th>
          <th style="width:180px;"></th>
        </tr>
      </thead>
      <tbody>
        @if (items == null)
        {
            <tr><td colspan="10">Loading...</td></tr>
        }
        else if (items.Count == 0)
        {
            <tr><td colspan="10">No records</td></tr>
        }
        else
        {
            @foreach (var it in items)
            {
                <tr>
                    <td>@it.Id</td><td>@it.Title</td><td>@it.CreatedByUserId</td><td>@it.AssignedToUserId</td><td>@it.ClientId</td><td>@it.CategoryId</td><td>@it.StatusId</td><td>@it.ReleaseId</td>
                    <td>
                        <div class="btn-group">
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => Edit(it)">Edit</button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteAsync(it.Id)">Delete</button>
                        </div>
                    </td>
                </tr>
            }
        }
      </tbody>
    </table>
  </div>
</div>

@code {
    private List<Issue> items = new();
    private Issue current = new();

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task LoadAsync()
    {
        items = await Service.GetAllAsync();
    }

    private void Edit(Issue it)
    {
        current = new Issue { Id = it.Id, Title = it.Title, Description = it.Description, CreatedByUserId = it.CreatedByUserId, AssignedToUserId = it.AssignedToUserId, ClientId = it.ClientId, CategoryId = it.CategoryId, StatusId = it.StatusId, ReleaseId = it.ReleaseId, CreatedAt = it.CreatedAt, UpdatedAt = it.UpdatedAt };
    }

    private void ClearForm() => current = new Issue();

    private async Task SaveAsync()
    {
        if (current.Id == 0)
        {
            var saved = await Service.CreateAsync(current);
            current = new Issue();
        }
        else
        {
            await Service.UpdateAsync(current.Id, current);
            current = new Issue();
        }
        await LoadAsync();
    }

    private async Task DeleteAsync(int id)
    {
        // TODO: Replace with a nicer confirmation dialog if desired
        await Service.DeleteAsync(id);
        await LoadAsync();
    }
}
